/*
 * Copyright (c) 2023. California Baptist University
 * Department of Computer Science and Data Sciences
 *
 * InstructorTileManagerTest.java
 *
 * DO NOT EDIT THIS FILE!!
 *
 */

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import static org.junit.jupiter.api.Assertions.*;

import static java.util.concurrent.TimeUnit.SECONDS;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class InstructorTileManagerTest {

    public static final int TIMEOUT_IN_SECONDS = 5;

    // a tile by itself on the right side of the panel
    private Tile tile1 = new Tile(140, 30, 38, 100, Color.RED);
    // a small tile completely inside tile3
    private Tile tile2 = new Tile(35, 50, 20, 20, Color.BLUE);
    // a larger tile completely surrounding tile2
    private Tile tile3 = new Tile(35, 40, 30, 90, Color.DARK_GRAY);
    private Tile tile4 = new Tile(1, 1, 26, 110, Color.GRAY);
    private Tile tile5 = new Tile(250, 0, 30, 20, Color.YELLOW);
    private Tile tile6 = new Tile(250, 0, 30, 20, Color.ORANGE);

    private TileManager initializeTestTiles(Tile tile1, Tile tile2, Tile tile3) {
        return initializeTiles(new Tile[]{tile1, tile2, tile3});
    }

    private int xRightEdge(Tile tile) {
        return tile.getX() + tile.getWidth() - 1;
    }

    private int yBottomEdge(Tile tile) {
        return tile.getY() + tile.getHeight() - 1;
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void constructorTest() {
        TileManager tileManager = new TileManager();
        List<Tile> tileList = tileManager.getTiles();
        assertTrue(tileList.isEmpty(), "The constructor should initialize an empty list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void addTileTest() {
        Tile tile1 = new Tile(100, 100, 50, 20, Color.RED);
        Tile tile2 = new Tile(35, 50, 20, 20, Color.blue);
        Tile tile3 = new Tile(45, 170, 30, 90, Color.DARK_GRAY);

        TileManager tileManager = initializeTiles(new Tile[]{tile1, tile2, tile3});

        // asserts can be run in sequence because tiles were added in sequence
        // if the first test fails then subsequence tests should not be run (no need for assertAll)
        List<Tile> tileList = tileManager.getTiles();
        assertAll("Confirm tiles were added to the end of the list",
                () -> assertEquals(tile1, tileList.get(0), "Tiles should be added to the end of the list"),
                () -> assertEquals(tile2, tileList.get(1), "Tiles should be added to the end of the list"),
                () -> assertEquals(tile3, tileList.get(2), "Tiles should be added to the end of the list")
        );
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void raiseTestNoTileClicked() {
        // initialize tileManager with tile3 on the bottom (at the front of the list)
        TileManager tileManager = initializeTestTiles(tile3, tile2, tile1);

        List<Tile> tileList = tileManager.getTiles();
        List<Tile> tileListCopy = new ArrayList<>(tileList);

        // get x and y values of four corners of tile3
        int xLeftEdge = tile3.getX();
        int xRightEdge = xRightEdge(tile3);
        int yTopEdge = tile3.getY();
        int yBottomEdge = yBottomEdge(tile3);
        int xOutsideLeft = xLeftEdge - 1;
        int xOutsideRight = xRightEdge + 1;
        int yOutsideTop = yTopEdge - 1;
        int yOutsideBottom = yBottomEdge + 1;

        tileManager.raise(xOutsideLeft,yTopEdge);
        assertEquals(tileListCopy, tileList, "Clicked left of top-left corner - no tile should be raised");
        tileManager.raise(xLeftEdge,yOutsideTop);
        assertEquals(tileListCopy, tileList, "Clicked above top-left corner - no tile should be raised");
        tileManager.raise(xRightEdge,yOutsideTop);
        assertEquals(tileListCopy, tileList, "Clicked above top-right corner - no tile should be raised");
        tileManager.raise(xOutsideRight,yTopEdge);
        assertEquals(tileListCopy, tileList, "Clicked right of top-right corner - no tile should be raised");
        tileManager.raise(xOutsideRight,yBottomEdge);
        assertEquals(tileListCopy, tileList, "Clicked right of bottom-right corner - no tile should be raised");
        tileManager.raise(xRightEdge,yOutsideBottom);
        assertEquals(tileListCopy, tileList, "Clicked below bottom-right corner - no tile should be raised");
        tileManager.raise(xLeftEdge,yOutsideBottom);
        assertEquals(tileListCopy, tileList, "Clicked below bottom-left corner - no tile should be raised");
        tileManager.raise(xOutsideLeft,yBottomEdge);
        assertEquals(tileListCopy, tileList, "Clicked left of bottom-left corner - no tile should be raised");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void raiseTestUpperLeftCornerClicked() {
        // initialize tileManager with tile3 on the bottom (at the front of the list)
        TileManager tileManager = initializeTestTiles(tile3, tile2, tile1);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of upper-left corner of tile3
        int x = tile3.getX();
        int y = tile3.getY();

        //Left boundary of tile
        tileManager.raise(x, y);  // clicking on upper-left corner of tile3; should move tile3 to the end (top) of the list
        int end = tileList.size() - 1;
        assertEquals(tile3, tileList.get(end), "The tile " + tile3 + " should be moved to the end (top) of the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void raiseTestUpperRightCornerClicked() {
        // initialize tileManager with tile3 on the bottom (at the front of the list)
        TileManager tileManager = initializeTestTiles(tile3, tile2, tile1);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of upper-right corner of tile3
        int x = xRightEdge(tile3);
        int y = tile3.getY();

        //Left boundary of tile
        tileManager.raise(x, y);  // clicking on upper-right corner of tile3; should move tile3 to the end (top) of the list
        int end = tileList.size() - 1;
        assertEquals(tile3, tileList.get(end), "The tile " + tile3 + " should be moved to the end (top) of the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void raiseTestLowerRightCornerClicked() {
        // initialize tileManager with tile3 on the bottom (at the front of the list)
        TileManager tileManager = initializeTestTiles(tile3, tile2, tile1);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of lower-right corner of tile3
        int x = xRightEdge(tile3);
        int y = yBottomEdge(tile3);

        //Left boundary of tile
        tileManager.raise(x, y);  // clicking on upper-right corner of tile3; should move tile3 to the end (top) of the list
        int end = tileList.size() - 1;
        assertEquals(tile3, tileList.get(end), "The tile " + tile3 + " should be moved to the end (top) of the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void raiseTestLowerLeftCornerClicked() {
        // initialize tileManager with tile3 on the bottom (at the front of the list)
        TileManager tileManager = initializeTestTiles(tile3, tile2, tile1);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of lower-right corner of tile3
        int x = tile3.getX();
        int y = yBottomEdge(tile3);

        //Left boundary of tile
        tileManager.raise(x, y);  // clicking on upper-right corner of tile3; should move tile3 to the end (top) of the list
        int end = tileList.size() - 1;
        assertEquals(tile3, tileList.get(end), "The tile " + tile3 + " should be moved to the end (top) of the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void lowerTestNoTileClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile1, tile2, tile3);

        List<Tile> tileList = tileManager.getTiles();
        List<Tile> tileListCopy = new ArrayList<>(tileList);

        // get x and y values of four corners of tile3
        int xLeftEdge = tile3.getX();
        int xRightEdge = xRightEdge(tile3);
        int yTopEdge = tile3.getY();
        int yBottomEdge = yBottomEdge(tile3);
        int xOutsideLeft = xLeftEdge - 1;
        int xOutsideRight = xRightEdge + 1;
        int yOutsideTop = yTopEdge - 1;
        int yOutsideBottom = yBottomEdge + 1;

        tileManager.lower(xOutsideLeft,yTopEdge);
        assertEquals(tileListCopy, tileList, "Clicked left of top-left corner - no tile should be lowered");
        tileManager.lower(xLeftEdge,yOutsideTop);
        assertEquals(tileListCopy, tileList, "Clicked above top-left corner - no tile should be lowered");
        tileManager.lower(xRightEdge,yOutsideTop);
        assertEquals(tileListCopy, tileList, "Clicked above top-right corner - no tile should be lowered");
        tileManager.lower(xOutsideRight,yTopEdge);
        assertEquals(tileListCopy, tileList, "Clicked right of top-right corner - no tile should be lowered");
        tileManager.lower(xOutsideRight,yBottomEdge);
        assertEquals(tileListCopy, tileList, "Clicked right of bottom-right corner - no tile should be lowered");
        tileManager.lower(xRightEdge,yOutsideBottom);
        assertEquals(tileListCopy, tileList, "Clicked below bottom-right corner - no tile should be lowered");
        tileManager.lower(xLeftEdge,yOutsideBottom);
        assertEquals(tileListCopy, tileList, "Clicked below bottom-left corner - no tile should be lowered");
        tileManager.lower(xOutsideLeft,yBottomEdge);
        assertEquals(tileListCopy, tileList, "Clicked left of bottom-left corner - no tile should be lowered");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void lowerTestUpperLeftCornerClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile1, tile2, tile3);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of upper-left corner of tile3
        int x = tile3.getX();
        int y = tile3.getY();

        // Lower tile using upper-left corner - should move tile3 to the front (bottom) of the list
        tileManager.lower(x, y);
        assertEquals(tile3, tileList.get(0), "The tile " + tile3 + " should be moved to the front (bottom) of the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void lowerTestUpperRightCornerClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile1, tile2, tile3);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of upper-right corner of tile3
        int x = xRightEdge(tile3);
        int y = tile3.getY();

        // Lower tile using upper-right corner - should move tile3 to the front (bottom) of the list
        tileManager.lower(x, y);
        assertEquals(tile3, tileList.get(0), "The tile " + tile3 + " should be moved to the front (bottom) of the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void lowerTestBottomRightCornerClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile1, tile2, tile3);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of bottom-right corner of tile3
        int x = xRightEdge(tile3);
        int y = yBottomEdge(tile3);

        // Lower tile using bottom-right corner - should move tile3 to the front (bottom) of the list
        tileManager.lower(x, y);
        assertEquals(tile3, tileList.get(0), "The tile " + tile3 + " should be moved to the front (bottom) of the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void lowerTestBottomLeftCornerClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile1, tile2, tile3);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of bottom-left corner of tile3
        int x = tile3.getX();
        int y = yBottomEdge(tile3);

        // Lower tile using bottom-left corner - should move tile3 to the front (bottom) of the list
        tileManager.lower(x, y);
        assertEquals(tile3, tileList.get(0), "The tile " + tile3 + " should be moved to the front (bottom) of the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void deleteTestNoTileClicked() {
        // initialize tileManager using tiles 4, 5 & 6
        TileManager tileManager = initializeTestTiles(tile4, tile5, tile6);

        List<Tile> tileList = tileManager.getTiles();
        List<Tile> tileListCopy = new ArrayList<>(tileList);

        // get x and y values of four corners of tile4
        int xLeftEdge = tile4.getX();
        int xRightEdge = xRightEdge(tile4);
        int yTopEdge = tile4.getY();
        int yBottomEdge = yBottomEdge(tile4);
        int xOutsideLeft = xLeftEdge - 1;
        int xOutsideRight = xRightEdge + 1;
        int yOutsideTop = yTopEdge - 1;
        int yOutsideBottom = yBottomEdge + 1;

        tileManager.delete(xOutsideLeft,yTopEdge);
        assertEquals(tileListCopy, tileList, "Clicked left of top-left corner - no tile should be deleted");
        tileManager.delete(xLeftEdge,yOutsideTop);
        assertEquals(tileListCopy, tileList, "Clicked above top-left corner - no tile should be deleted");
        tileManager.delete(xRightEdge,yOutsideTop);
        assertEquals(tileListCopy, tileList, "Clicked above top-right corner - no tile should be deleted");
        tileManager.delete(xOutsideRight,yTopEdge);
        assertEquals(tileListCopy, tileList, "Clicked right of top-right corner - no tile should be deleted");
        tileManager.delete(xOutsideRight,yBottomEdge);
        assertEquals(tileListCopy, tileList, "Clicked right of bottom-right corner - no tile should be deleted");
        tileManager.delete(xRightEdge,yOutsideBottom);
        assertEquals(tileListCopy, tileList, "Clicked below bottom-right corner - no tile should be deleted");
        tileManager.delete(xLeftEdge,yOutsideBottom);
        assertEquals(tileListCopy, tileList, "Clicked below bottom-left corner - no tile should be deleted");
        tileManager.delete(xOutsideLeft,yBottomEdge);
        assertEquals(tileListCopy, tileList, "Clicked left of bottom-left corner - no tile should be deleted");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void deleteTestUpperLeftCornerClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile4, tile5, tile6);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of upper-left corner of tile4
        int x = tile4.getX();
        int y = tile4.getY();

        // delete tile using upper-left corner - should delete tile from the list
        tileManager.delete(x, y);
        assertFalse(tileList.contains(tile4), "tile " + tile4 + " should be removed from the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void deleteTestUpperRightCornerClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile4, tile5, tile6);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of upper-right corner of tile4
        int x = xRightEdge(tile4);
        int y = tile4.getY();

        // delete tile using upper-right corner - should delete tile from the list
        tileManager.delete(x, y);
        assertFalse(tileList.contains(tile4), "tile " + tile4 + " should be removed from the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void deleteTestBottomRightCornerClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile4, tile5, tile6);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of bottom-right corner of tile4
        int x = xRightEdge(tile4);
        int y = yBottomEdge(tile4);

        // delete tile using bottom-right corner - should delete tile from the list
        tileManager.delete(x, y);
        assertFalse(tileList.contains(tile4), "tile " + tile4 + " should be removed from the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void deleteTestBottomLeftCornerClicked() {
        // initialize tileManager with tile3 on the top (at the end of the list)
        TileManager tileManager = initializeTestTiles(tile4, tile5, tile6);

        List<Tile> tileList = tileManager.getTiles();

        // get x and y values of bottom-left corner of tile4
        int x = tile4.getX();
        int y = yBottomEdge(tile4);

        // delete tile using bottom-right corner - should delete tile from the list
        tileManager.delete(x, y);
        assertFalse(tileList.contains(tile4), "tile " + tile4 + " should be removed from the list");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void deleteAllTest() {
        Tile tile1 = new Tile(400, 1, 54, 51, Color.GRAY);
        Tile tile2 = new Tile(30000, 30000, 300000, 2000000, Color.YELLOW);
        Tile tile3 = new Tile(370, 35, 35, 100, Color.BLUE);
        Tile tile4 = new Tile(350,30,100,50, Color.RED);
        Tile tile5 = new Tile(2500, 0, 35, 20, Color.ORANGE);
        TileManager tileManager = initializeTiles(new Tile[]{tile1, tile2, tile3, tile4, tile5});

        List<Tile> tileList = tileManager.getTiles();
        List<Tile> copyTileList = new ArrayList<>(tileList);

        //Check empty coordinate
        tileManager.delete(0, 5);  // clicking on a point that is not within any tile (no tile clicked)
        assertEquals(copyTileList, tileList, "The list should not be changed if no tile is clicked");

        //Check coordinate covering two tiles but not all
        tileManager.deleteAll(400, 40);  // clicking on a point that is over tile and tile3; but not tile2 or tile4
        assertAll(
                "Confirm tiles clicked were the only ones removed from the list",
                () -> assertTrue(tileList.contains(tile2), "tile " + tile2 + " should NOT be removed from the list"),
                () -> assertTrue(tileList.contains(tile5), "tile " + tile5 + " should NOT be removed from the list"),
                () -> assertFalse(tileList.contains(tile1), "tile " + tile1 + " SHOULD be removed from the list"),
                () -> assertFalse(tileList.contains(tile3), "tile " + tile3 + " SHOULD be removed from the list"),
                () -> assertFalse(tileList.contains(tile4), "tile " + tile4 + " SHOULD be removed from the list")
        );
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void listShuffledTest() {
        TileManager tileManager = new TileManager();
        List<Tile> tileList = tileManager.getTiles();
        //Initialize random list of tiles
        Random random = new Random();
        for (int i = 0; i < 20; i++) {
            tileManager.addTile(new Tile(random.nextInt(301), random.nextInt(201),
                    random.nextInt(30) + 20, random.nextInt(30) + 20, Color.BLUE));
        }
        List<Tile> copyTileList = new ArrayList<>(tileList);

        //Shuffle Tiles
        tileManager.shuffle(300, 200);

        assertNotEquals(tileList, copyTileList, "List should be shuffled");
    }

    @Test
    @Timeout(value = TIMEOUT_IN_SECONDS, unit = SECONDS)
    public void shuffleChangesPositionWithinBoundsTest() {
        TileManager tileManager = new TileManager();
        Tile tile = new Tile(200, 10, 50, 50, Color.GRAY);
        tileManager.addTile(tile);

        tileManager.shuffle(300, 200);

        assertTrue(tile.getX() <= 250, "Position should not go out of bounds");
        assertTrue(tile.getY() <= 150, "Position should not go out of bounds");
    }

    private TileManager initializeTiles(Tile[] tiles) {
        TileManager tileManager = new TileManager();

        for (int i=0; i < tiles.length; i++) {
            tileManager.addTile(tiles[i]);
        }

        return tileManager;
    }
}